package com.spring.test.model.myproxy;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Arrays;

/**
 * 生成代理对象的代码
 * @author Administrator
 *
 */
public class MyProxy {
	private static String ln = "\r\n";
	public static Object newProxyInstance(
			MyClassLoader loader, Class<?>[] interfaces, MyInvocationHandler h) throws IOException {
		System.out.println("动态代理方法开始生成--------------");
		//1、生成源码
		String proxySrc = generateSrc(interfaces[0]);
		
		//2、将生成的源码输出到磁盘，保存为.java文件
		String filePath = MyProxy.class.getResource("").getPath();
		System.out.println("动态代理方法开始生成filePath："+filePath);
		File f = new File(filePath+"$Proxy0.java");
		FileWriter fw = new FileWriter(f);
		fw.write(proxySrc);
		fw.flush();
		fw.close();
		//3、编译源码，并且生成.class文件
		//4、将.class文件中的内容，动态加载到JVM中
		//5、返回被代理后的代理对象
		return null;
	}
	
	private static String generateSrc(Class<?> interfaces) {
		StringBuffer src = new StringBuffer();
		src.append("package com.spring.test.model.myproxy;").append(ln);
		//导入类
		src.append("import java.lang.reflect.Method;").append(ln);
		//类定义
		src.append("public class $Proxy0 implements " +interfaces.getName()+ "{"+ln);
		//属性
		src.append("MyInvocationHandler h;").append(ln);
		//构造方法
		src.append("public $Proxy0(MyInvocationHandler h){").append(ln);
		src.append("this.h = h;").append(ln);
		src.append("}").append(ln);
		//一般方法
		
		for(Method m:interfaces.getMethods()) {
			// throws Throwable 如果有异常，需要抛出，如果有参数，需要加入
			Class<?>[] ParameterTypes = m.getParameterTypes();
			System.out.println("-------"+Arrays.toString(ParameterTypes));
			Parameter[] Parameters = m.getParameters();
			String parametersStr = "";
			String classStr = "";
			if(ParameterTypes!=null && ParameterTypes.length>0) {
				for (int i = 0; i < Parameters.length; i++) {
					
				}
			}
			src.append("public "+m.getReturnType().getName()+" "+m.getName()+"() throws Throwable{ ").append(ln);
			
			src.append("Method m = "+interfaces.getName()+".class.getMethod(\""+m.getName()+"\",new Class[]{});").append(ln);
			
			//判断是否有返回值：有返回值
			if(!"void".equals(m.getReturnType().getName())){
				src.append("return ("+m.getReturnType().getName()+")");
			}
			src.append("this.h.invoke(this,m,null);").append(ln);
			
			src.append("}").append(ln);
		}
		src.append("}");
		return src.toString();
	}
}
