package com.fk.test.paxos;

import java.util.Arrays;
import java.util.Random;

/**
 * 提议者
 * 
 * @author Administrator Proposer发送获取相应的最大的M0的value值
 */
public class Proposer extends Thread {
	private Acceptor[] acceptors = null;// 决策者
	private Integer num = null;
	private Integer proposerNum = null;
	private int times = 0;// 第几轮发送请求了
	private Response[] responseArr = null;
	private int result = 0;// 上一次的结果所有结果的value是否一致

	public Proposer(String name, Acceptor[] acceptors, Integer proposerNum) {
		super(name);
		this.acceptors = acceptors;
		this.proposerNum = proposerNum;

	}

	public void run() {
		Random random = new Random();
		while (true) {
			times++;// 发起轮次请求次数

			Request request = new Request();
			if (responseArr == null) {
				request.setValue(proposerNum);
			} else {
				int maxRequestNum = 0;
				int k = 0;
				for (int i = 0; i < acceptors.length; i++) {
					int p = acceptors[i].propseResponse.get(num.intValue()).getAcceptRequestNum();
					if (p > maxRequestNum) {
						maxRequestNum = p;
						k = i;
					}
				}
				request.setValue(acceptors[k].propseResponse.get(num).getValue());
			}
			num = TestPaxos.getNextNum();
			request.setProposerName(this.getName());
			request.setRequestNum(num);
			System.out.println("提议者" + this.getName() + " 第" + times + "轮发送请求：" + request);

			for (int i = 0; i < acceptors.length; i++) {
				try {
					Thread.sleep(random.nextInt(10) + 10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					acceptors[i].requests.put(request);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (result == 1) {// 所有的执行结果一致
				System.out.println("提议者" + this.getName() + " 所有结果的value一致：" + Arrays.toString(responseArr));
				System.out.println("提议者" + this.getName() + "哈哈哈哈哈哈。。。。。。。结束执行");
				break;
			}
			responseArr = new Response[5];
			int n = 0;
			while (n != 5) {// 当5个都回复了，就可以结束了
				n = 0;
				for (int i = 0; i < acceptors.length; i++) {
					if (acceptors[i].propseResponse.get(num.intValue()) != null) {
						n++;
						responseArr[i] = acceptors[i].propseResponse.get(num.intValue());
					}
				}
			}
			result = 1;
			int resultValue = acceptors[0].propseResponse.get(num.intValue()).getValue();
			for (int i = 1; i < acceptors.length; i++) {
				if (resultValue != acceptors[i].propseResponse.get(num.intValue()).getValue().intValue()) {
					result = 0;
					System.out.println("提议者" + this.getName() + " 所有结果的value不一致：" + Arrays.toString(responseArr));
					System.out.println("发起新的请求。。。。。。。");
					break;
				}
			}
		}

	}

}