package com.fk.test.lock;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class TestReentrantLock {
	
	public static final ReentrantLock  lock = new ReentrantLock();
	public static final Condition  condition = lock.newCondition();
	public static int count = 0;
	public static Thread t1 = new Thread() {
		public void run() {
			lock.lock();
			try {
				count++;
			}finally{
				lock.unlock();
			}
		}
	};
    public static void main(String[] args) {
        //线程数
        int threadNum = 1;
        Syn syn = new Syn();
        Thread[] threads = new Thread[threadNum];
        //记录运行时间
        long l = System.currentTimeMillis();
        for (int i = 0; i < threadNum; i++) {
            threads[i] = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int j = 0; j < 3; j++) {
//                        syn.increaseLock();
                        syn.increase();
                    }
                }
            });
            threads[i].start();
        }
        //等待所有线程结束
        try {
            for (int i = 0; i < threadNum; i++)
                threads[i].join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(syn + " : " + (System.currentTimeMillis() - l) + "ms");
    }
}
