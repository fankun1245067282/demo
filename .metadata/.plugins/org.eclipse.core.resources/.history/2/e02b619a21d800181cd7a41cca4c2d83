package com.fk.test.paxos;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;
/**
 * 决策者
 * @author Administrator
 *
 */
public class Acceptor extends Thread {
	//Acceptor批准的value值，会批准最大编号请求的value
	public Integer acceptValue = null;
	public Integer acceptProposalNum = null;
	public Integer minProposal = 0; //最小提议编号，要比这个大才能返回OK，所有的编号都比0大，第一次请求就会保存提议编号
	public List<Request> allAcceptRequests = new ArrayList<>();;
	//决策者获取的请求，同步处理
	public LinkedBlockingQueue<Request> requests = new LinkedBlockingQueue<>();
	public Map<String, Response>  propseResponse = new ConcurrentHashMap<>();
	
	public Acceptor(String name) {
		super(name);
	}
	
	public void run() {
		while(true) {
			try {
				Request request = requests.take();//获取请求队列中的请求，没有会阻塞
				Response response = new Response();
				//proposer请求
				if(Request.REQUEST_TYPE_PREPARE.equals(request.getRequestType())) {
					 //大于的保存提议编号，请求proposalNum>minProposal,
					 if(request.getProposalNum().intValue()>minProposal){
						response.setValue(value);
						response.setAcceptRequestNum(lastAcceptRequestNum);
						allAcceptRequests.add(request);
						//保存最新批准的value,requestNum
						value = request.getValue();
						lastAcceptRequestNum = request.getRequestNum();
						
					}else {//小于的返回NONE
						response = Response.NULL;//没有响应
					}
					response.setAcceptorName(this.getName());
					propseResponse.put(String.valueOf(request.getRequestNum().intValue()), response);
					System.out.println(this.getName() + "处理了：::"+request+"  结果："+request.getRequestNum()+"==="+response);
					
					
				//acceptor请求
				}else {
					//大于的批准，请求requestNum>lastAcceptRequestNum
					if(request.getRequestNum().intValue()>lastAcceptRequestNum.intValue()
							&& request.getValue().intValue()==value.intValue()){
						response.setValue(value);
						response.setAcceptRequestNum(lastAcceptRequestNum);
						allAcceptRequests.add(request);
						//保存最新批准的value,requestNum
						value = request.getValue();
						lastAcceptRequestNum = request.getRequestNum();
						
					}else {//小于的返回NONE
						response = Response.NONE;
					}
					response.setAcceptorName(this.getName());
					propseResponse.put(String.valueOf(request.getRequestNum().intValue()), response);
					System.out.println(this.getName() + "处理了：::"+request+"  结果："+request.getRequestNum()+"==="+response);
					
			
				}

			} catch (InterruptedException e) {
				e.printStackTrace();
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
	}
	
}
