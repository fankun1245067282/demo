package com.fk.test;

import java.util.SortedMap;
import java.util.TreeMap;

/**
 * 一致性Hash算法实现版本1：不带虚拟节点
 * 使用一致性Hash算法，尽管增强了系统的伸缩性，但是也有可能导致负载分布不均匀，解决办法就是使用虚拟节点代替真实节点，
 * 第一个代码版本，先来个简单的，不带虚拟节点。
 * 
 * @author fankun
 *
 */
public class ConsistentHashingWithoutVirtualNode {
	/**
	 * 待添加入Hash环的服务器列表
	 */
	private static String[] servers = { 
			"192.168.0.0:111", 
			"192.168.0.1:111", 
			"192.168.0.2:111", 
			"192.168.0.3:111",
			"192.168.0.4:111" };

	/**
	 * key表示服务器的hash值，value表示服务器的名称
	 */
	private static SortedMap<Integer, String> sortedMap = new TreeMap<Integer, String>();

	/**
	 * 程序初始化，将所有的服务器放入sortedMap中
	 */
	static {
		for (int i = 0; i < servers.length; i++) {
			int hash = getHash(servers[i]);
			System.out.println("[" + servers[i] + "]加入集合中, 其Hash值为" + hash);
			sortedMap.put(hash, servers[i]);
		}
		System.out.println();
	}

	/**
	 * 使用FNV1_32_HASH算法计算服务器的Hash值,这里不使用重写hashCode的方法，最终效果没区别
	 */
	private static int getHash(String str) {
		final int p = 16777619;
		int hash = (int) 2166136261L;
		for (int i = 0; i < str.length(); i++)
			hash = (hash ^ str.charAt(i)) * p;
		hash += hash << 13;
		hash ^= hash >> 7;
		hash += hash << 3;
		hash ^= hash >> 17;
		hash += hash << 5;

		// 如果算出来的值为负数则取其绝对值
		if (hash < 0)
			hash = Math.abs(hash);
		return hash;
	}

   /**
	* 得到应当路由到的结点
	* 
	* 3、解决方案三：二叉查找树
	*
	*	抛开List这种数据结构，另一种数据结构则是使用二叉查找树。对于树不是很清楚的朋友可以简单看一下这篇文章树形结构。
	*	
	*	当然我们不能简单地使用二叉查找树，因为可能出现不平衡的情况。平衡二叉查找树有AVL树、红黑树等，这里使用红黑树，选用红黑树的原因有两点：
	*	
	*	1、红黑树主要的作用是用于存储有序的数据，这其实和第一种解决方案的思路又不谋而合了，但是它的效率非常高
	*	
	*	2、JDK里面提供了红黑树的代码实现TreeMap和TreeSet
	*	
	*	另外，以TreeMap为例，TreeMap本身提供了一个tailMap(K fromKey)方法，支持从红黑树中查找比fromKey大的值的集合，但并不需要遍历整个数据结构。
	*	
	*	使用红黑树，可以使得查找的时间复杂度降低为O(logN)，比上面两种解决方案，效率大大提升。
	* 
	*/
	private static String getServer(String node) {
		// 得到带路由的结点的Hash值
		int hash = getHash(node);
		// 得到大于该Hash值的所有Map
		SortedMap<Integer, String> subMap = sortedMap.tailMap(hash);
		//在getServer的方法中。应该添加 判断subMap是否为空的逻辑，
//		if(subMap==null || subMap.isEmpty()) {
//			//当待路由node的hash值大于server节点的hash值时，回头取server 的TreeMap的第一个元素	
//			Integer i = sortedMap.firstKey();
//			// 返回对应的服务器名称
//			return subMap.get(i);				
//		}else {
//			// 第一个Key就是顺时针过去离node最近的那个结点
//			Integer i = subMap.firstKey();
//			// 返回对应的服务器名称
//			return subMap.get(i);		
//		}
		// 返回对应的服务器名称
		return subMap.get(i);	
	}

	public static void main(String[] args) {
		System.out.println(sortedMap.firstKey());
		String[] nodes = { "127.0.0.1:1111", "221.226.0.1:2222", "10.211.0.1:3333" };
		for (int i = 0; i < nodes.length; i++)
			System.out.println("[" + nodes[i] + "]的hash值为" + getHash(nodes[i]) + 
					", 被路由到结点[" + getServer(nodes[i]) + "]");
	}
	
	
}
